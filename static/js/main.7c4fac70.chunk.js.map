{"version":3,"sources":["ui/utils/httpConfig.js","ui/contact-form/contact-form-video-10mb.mp4","ui/contact-form/ContactFormContents.js","ui/contact-form/ContactForm.js","ui/Contact.js","ui/scene/blender.glb","ui/scene/Blender.js","ui/scene/skills-icons/SkillsIcons.js","ui/tutorial/mouse01.glb","ui/tutorial/Mouse01.js","ui/tutorial/hand-model01.glb","ui/tutorial/Hand-model.js","ui/tutorial/headset01.glb","ui/tutorial/Headset01.js","ui/Home.js","index.js","App.js"],"names":["httpConfig","axios","create","interceptors","response","use","data","headers","status","message","type","error","console","log","Promise","reject","request","config","authorization","window","localStorage","getItem","ContactFormContents","props","values","errors","touched","handleChange","dirty","isSubmitting","handleBlur","handleSubmit","history","handleReset","useHistory","src","video","autoPlay","muted","className","onSubmit","htmlFor","name","value","contactFormName","placeholder","onChange","onBlur","contactFormEmail","contactFormSubject","contactFormMessage","rows","onClick","push","ContactForm","validator","Yup","shape","required","initialValues","resetForm","setStatus","post","then","reply","validationSchema","Contact","useGLTF","preload","blenderGLB","mouseGLB","handModel","headset","undefined","navigator","xr","Home","style","ReactDOM","render","exact","path","component","document","querySelector"],"mappings":"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","file":"static/js/main.7c4fac70.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const httpConfig = axios.create();\r\n\r\nhttpConfig.interceptors.response.use(function ({data, headers}) {\r\n\tif (data.status === 200) {\r\n\t\treturn data.data !== null\r\n\t\t\t? {message: null, data: data.data, status: 200, type: \" alert alert-success\", headers: {...headers}}\r\n\t\t\t: {message: data.message, status: 200, type: \" alert alert-success\", data: null, headers: {...headers}};\r\n\t}\r\n\treturn {message: data.message, status: data.status, type: \"alert alert-danger\", data: null, headers: {...headers}}\r\n\r\n}, function (error) {\r\n\t// Do something with response error\r\n\tconsole.log(error);\r\n\treturn Promise.reject(error);\r\n});\r\n\r\nhttpConfig.interceptors.request.use(\r\n\t(config) => {\r\n\r\n\t\t// Attach our authorization via JWT token.\r\n\t\tconst authorization = window.localStorage.getItem(\"authorization\")\r\n\t\tif (authorization) {\r\n\t\t\tconfig.headers['authorization'] = authorization\r\n\t\t}\r\n\t\treturn config\r\n\t}, (error) => {\r\n\t\t// Do something with response error\r\n\t\tconsole.log(error);\r\n\t\treturn Promise.reject(error);\r\n\t}\r\n)\r\n","export default __webpack_public_path__ + \"static/media/contact-form-video-10mb.d8340572.mp4\";","import React from \"react\";\r\nimport {FormDebugger} from \"./FormDebugger\";\r\nimport \"./form-style.css\"\r\nimport video from \"./contact-form-video-10mb.mp4\"\r\nimport {useHistory} from \"react-router\";\r\n\r\n\r\nexport const ContactFormContents = (props) => {\r\n    const {\r\n        status,\r\n        values,\r\n        errors,\r\n        touched,\r\n        dirty,\r\n        isSubmitting,\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit,\r\n        handleReset\r\n    } = props\r\n\r\n    // console.log(\"status\", status.type, status.message)\r\n\r\n    let history = useHistory();\r\n\r\n    function handleClick() {\r\n        history.push(\"/\");\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <video src={video} autoPlay muted className=\"background-video\"></video>\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col form-text-color\">\r\n                        <h1>Contact Me</h1>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col form-text-color\">\r\n                        <h2>Complete Form Below</h2>\r\n                    </div>\r\n                </div>\r\n                <form onSubmit={handleSubmit}>\r\n                    <div className=\"form-row\">\r\n                        <div className=\"col\">\r\n                            <div className=\"form-group form-text-color\">\r\n                                <label htmlFor=\"contactFormName\">Name</label>\r\n                                <div className=\"input-group\">\r\n                                    <div className=\"input-group-prepend\">\r\n                                        <div className=\"input-group-text\">\r\n                                        </div>\r\n                                    </div>\r\n                                    <input\r\n                                        className=\"form-control\"\r\n                                        name=\"contactFormName\"\r\n                                        type=\"text\"\r\n                                        value={values.contactFormName}\r\n                                        placeholder=\"Enter Name\"\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                    />\r\n                                </div>\r\n                                {\r\n                                    errors.contactFormName && touched.contactFormName && (\r\n                                        <div className=\"alert alert-danger\">\r\n                                            {errors.contactFormName}\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"col\">\r\n                            <div className=\"form-group form-text-color\">\r\n                                <label htmlFor=\"contactFormEmail\">Email</label>\r\n                                <div className=\"input-group\">\r\n                                    <div className=\"input-group-prepend\">\r\n                                        <div className=\"input-group-text\">\r\n                                        </div>\r\n                                    </div>\r\n                                    <input\r\n                                        className=\"form-control\"\r\n                                        name=\"contactFormEmail\"\r\n                                        type=\"email\"\r\n                                        value={values.contactFormEmail}\r\n                                        placeholder=\"Enter Email\"\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                    />\r\n                                </div>\r\n                                {\r\n                                    errors.contactFormEmail && touched.contactFormEmail && (\r\n                                        <div className=\"alert alert-danger\">\r\n                                            {errors.contactFormEmail}\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">\r\n                            <div className=\"form-group form-text-color\">\r\n                                <label htmlFor=\"contactFormSubject\">Subject</label>\r\n                                <div className=\"input-group\">\r\n                                    <div className=\"input-group-prepend\">\r\n                                        <div className=\"input-group-text\">\r\n                                        </div>\r\n                                    </div>\r\n                                    <input\r\n                                        className=\"form-control\"\r\n                                        name=\"contactFormSubject\"\r\n                                        type=\"text\"\r\n                                        value={values.contactFormSubject}\r\n                                        placeholder=\"Enter Subject\"\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                    />\r\n                                </div>\r\n                                {\r\n                                    errors.contactFormSubject && touched.contactFormSubject && (\r\n                                        <div className=\"alert alert-danger\">\r\n                                            {errors.contactFormSubject}\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">\r\n                            <div className=\"form-group form-text-color\">\r\n                                <label htmlFor=\"contactFormMessage\">Message</label>\r\n                                <div className=\"input-group\">\r\n                                    <div className=\"input-group-prepend\">\r\n                                        <div className=\"input-group-text\">\r\n                                        </div>\r\n                                    </div>\r\n                                    <textarea\r\n                                        className=\"form-control\"\r\n                                        name=\"contactFormMessage\"\r\n                                        // type=\"text\"\r\n                                        value={values.contactFormMessage}\r\n                                        placeholder=\"Enter Message\"\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        rows=\"5\"\r\n                                    />\r\n                                </div>\r\n                                {\r\n                                    errors.contactFormMessage && touched.contactFormMessage && (\r\n                                        <div className=\"alert alert-danger\">\r\n                                            {errors.contactFormMessage}\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-2\">\r\n                            <div className=\"form-group\">\r\n                                <button className=\"btn btn-primary\" type=\"submit\">Submit</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-2\">\r\n                            <div>\r\n                                <button\r\n                                    className=\"btn btn-info\"\r\n                                    type=\"button\" onClick={handleClick}\r\n                                >Home\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                    {/*<FormDebugger {...props} />*/}\r\n                </form>\r\n                {\r\n                    status && (<div className={status.type}>{status.message}</div>)\r\n                }\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {httpConfig} from \"../utils/httpConfig\";\r\nimport * as Yup from \"yup\"\r\nimport {Formik} from \"formik\"\r\n\r\nimport {ContactFormContents} from \"./ContactFormContents\";\r\n\r\nexport const ContactForm = () => {\r\n\r\n    const contactForm = {\r\n        contactFormName: \"\",\r\n        contactFormEmail: \"\",\r\n        contactFormSubject: \"\",\r\n        contactFormMessage: \"\",\r\n    }\r\n\r\n    const validator = Yup.object().shape({\r\n        contactFormName: Yup.string()\r\n            .required(\"Name is required\"),\r\n        contactFormEmail: Yup.string()\r\n            .required(\"Email is required\"),\r\n        contactFormSubject: Yup.string()\r\n            .required(\"Subject is required\"),\r\n        contactFormMessage: Yup.string()\r\n            .required(\"Message is required\")\r\n    })\r\n\r\n    const submitContactForm = (values, {resetForm, setStatus}) => {\r\n        httpConfig.post(\"/apis/contact-form/\", values)\r\n            .then(reply => {\r\n                let { message, type } = reply\r\n\r\n                if(reply.status === 200 ) {\r\n                    resetForm()\r\n                }\r\n                setStatus({message, type})\r\n            })\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={contactForm}\r\n            onSubmit={submitContactForm}\r\n            validationSchema={validator}\r\n            >\r\n            {ContactFormContents}\r\n        </Formik>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {ContactForm} from \"./contact-form/ContactForm\";\r\n\r\nexport const Contact = () => {\r\n    return (\r\n        <>\r\n        <ContactForm />\r\n        </>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/blender.9bfd4ce1.glb\";","/*\r\nAuto-generated by: https://github.com/pmndrs/gltfjsx\r\n*/\r\n\r\nimport React, { useRef } from 'react'\r\nimport { useGLTF } from '@react-three/drei'\r\nimport blenderGLB from './blender.glb'\r\n\r\nexport default function Blender(props) {\r\n  const group = useRef()\r\n  const { nodes, materials } = useGLTF(blenderGLB)\r\n  return (\r\n    <group ref={group} {...props} dispose={null}>\r\n      <group rotation={[-Math.PI / 2, 0, 0]}>\r\n        <mesh geometry={nodes.Object_10.geometry} material={materials['SVGMat.033']} />\r\n        <mesh geometry={nodes.Object_2.geometry} material={materials['SVGMat.024']} />\r\n        <mesh geometry={nodes.Object_3.geometry} material={materials['SVGMat.026']} />\r\n        <mesh geometry={nodes.Object_4.geometry} material={materials['SVGMat.027']} />\r\n        <mesh geometry={nodes.Object_5.geometry} material={materials['SVGMat.028']} />\r\n        <mesh geometry={nodes.Object_6.geometry} material={materials['SVGMat.029']} />\r\n        <mesh geometry={nodes.Object_7.geometry} material={materials['SVGMat.030']} />\r\n        <mesh geometry={nodes.Object_8.geometry} material={materials['SVGMat.031']} />\r\n        <mesh geometry={nodes.Object_9.geometry} material={materials['SVGMat.032']} />\r\n      </group>\r\n    </group>\r\n  )\r\n}\r\n\r\nuseGLTF.preload(blenderGLB)\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {Box, useTexture} from \"@react-three/drei\";\r\nimport {useResponsive3d} from \"../../../customHooks/useResponsive3d\";\r\n\r\nexport const SkillsIcons = ({iconState}) => {\r\n\r\n    //loads textures for the icons\r\n    const reactIcon = useTexture(\"/react-icon.png\")\r\n    const expressIcon = useTexture(\"/express-icon.png\")\r\n    const reduxIcon = useTexture(\"/redux-icon.png\")\r\n    const dockerIcon = useTexture(\"/docker-icon.png\")\r\n    const bootstrapIcon = useTexture(\"/bootstrap-icon.png\")\r\n    const githubIcon = useTexture(\"/github-icon.png\")\r\n\r\n    const [currentIcon, setCurrentIcon] = useState(null)\r\n\r\n\r\n    //determines which icon is showing\r\n    useEffect(() => {\r\n        if (iconState === \"reactActive\") {\r\n            setCurrentIcon(reactIcon)\r\n        } else if (iconState === \"expressActive\") {\r\n            setCurrentIcon(expressIcon)\r\n        } else if (iconState === \"reduxActive\") {\r\n            setCurrentIcon(reduxIcon)\r\n        } else if (iconState === \"dockerActive\") {\r\n            setCurrentIcon(dockerIcon)\r\n        } else if (iconState === \"bootstrapActive\") {\r\n            setCurrentIcon(bootstrapIcon)\r\n        } else if (iconState === \"githubActive\") {\r\n            setCurrentIcon(githubIcon)\r\n        }\r\n        // console.log(\"icon state\", iconState)\r\n    }, [iconState])\r\n\r\n    //sets responsive behavior\r\n    const { skillsIconSize, skillsIconZPositionSize } = useResponsive3d()\r\n\r\n    return (\r\n        <>\r\n            <group\r\n                position={[20, 0, skillsIconZPositionSize]}\r\n                rotation={[0, -1.570796, 0]}\r\n                scale={skillsIconSize}\r\n            >\r\n                <mesh>\r\n                    <planeGeometry/>\r\n                    <meshStandardMaterial\r\n                        transparent={true}\r\n                        // opacity={0.5}\r\n                        map={currentIcon}\r\n                    />\r\n                </mesh>\r\n            </group>\r\n        </>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/mouse01.fcd2f0df.glb\";","/*\r\nAuto-generated by: https://github.com/pmndrs/gltfjsx\r\n*/\r\n\r\nimport React, {useEffect, useRef, useState} from 'react'\r\nimport {useGLTF, useAnimations} from '@react-three/drei'\r\nimport mouseGLB from './mouse01.glb'\r\nimport {useResponsive3d} from \"../../customHooks/useResponsive3d\";\r\n\r\nexport default function Mouse01(props) {\r\n    const group = useRef()\r\n    const {nodes, materials, animations} = useGLTF(mouseGLB)\r\n    const {actions} = useAnimations(animations, group)\r\n\r\n//sets mouse movement\r\n    const [action, setAction] = useState(\"mouseMove\")\r\n\r\n    // const [action, setAction] = useState(\"mouseMove\")\r\n    const [mouseButtonColor, setMouseButtonColor] = useState(\"#a0e734\")\r\n\r\n    useEffect(() => {\r\n        actions[action].reset().fadeIn(0.5).play()\r\n        // setMouseButtonColor(\"#a0e734\")\r\n        return () => actions[action].fadeOut(0.5)\r\n    }, [actions, action]);\r\n\r\n    const {mouseVisible} = useResponsive3d()\r\n\r\n    return (\r\n        <group ref={group} {...props} dispose={null}>\r\n            <group name=\"RootNode_(gltf_orientation_matrix)\" position={[-1.81, 0, 0]} rotation={[-Math.PI / 2, 0, 0]}>\r\n                <group\r\n                    visible={mouseVisible}\r\n                    position={[-31.11, -30.71, -1.89]}\r\n                    on={() => {\r\n                        setAction(\"mouseStill\")\r\n                        setMouseButtonColor(\"#a0e734\")\r\n                    }}\r\n                    onClick={() => {\r\n                        setAction(\"mouseMove\")\r\n                        setMouseButtonColor(\"#a0e734\")\r\n                    }}\r\n                    // on={() => {\r\n                    //     setAction(\"mouseStill\")\r\n                    //     setMouseButtonColor(\"3\")\r\n                    // }}\r\n                >\r\n                    <mesh geometry={nodes.Mesh_0.geometry} material={materials.Material__2}/>\r\n                    <mesh geometry={nodes.Mesh_0001.geometry}>\r\n                        <meshStandardMaterial attach='material' color={mouseButtonColor}/>\r\n                    </mesh>\r\n                </group>\r\n            </group>\r\n        </group>\r\n    )\r\n}\r\n\r\nuseGLTF.preload(mouseGLB)\r\n","export default __webpack_public_path__ + \"static/media/hand-model01.69bfef04.glb\";","/*\r\nAuto-generated by: https://github.com/pmndrs/gltfjsx\r\n*/\r\n\r\nimport React, {useEffect, useRef, useState} from 'react'\r\nimport { useGLTF, useAnimations } from '@react-three/drei'\r\nimport handModel from './hand-model01.glb'\r\nimport {useResponsive3d} from \"../../customHooks/useResponsive3d\";\r\n\r\nexport default function HandModel(props) {\r\n  const group = useRef()\r\n  const { nodes, materials, animations } = useGLTF(handModel)\r\n  const { actions } = useAnimations(animations, group)\r\n\r\n    //sets finger movement\r\n    const [action, setAction] = useState(\"fingerMove\")\r\n\r\n    useEffect(() => {\r\n        actions[action].reset().fadeIn(0.5).play()\r\n        // setMouseButtonColor(\"#a0e734\")\r\n        return () => actions[action].fadeOut(0.5)\r\n    }, [actions, action]);\r\n\r\n    const {fingerVisible} = useResponsive3d()\r\n\r\n  return (\r\n    <group ref={group} {...props} dispose={null} visible={fingerVisible}>\r\n      <mesh\r\n        name=\"node_MeshObject-1005584384-PolyPaper23\"\r\n        geometry={nodes['node_MeshObject-1005584384-PolyPaper23'].geometry}\r\n        material={materials.BlocksPaper}\r\n        // position={[-1.7, 0, 0]}\r\n      />\r\n    </group>\r\n  )\r\n}\r\n\r\nuseGLTF.preload(handModel)\r\n","export default __webpack_public_path__ + \"static/media/headset01.48b21e30.glb\";","/*\r\nAuto-generated by: https://github.com/pmndrs/gltfjsx\r\n*/\r\n\r\nimport React, {useEffect, useRef, useState} from 'react'\r\nimport { useGLTF, useAnimations } from '@react-three/drei'\r\nimport headset from './headset01.glb'\r\nimport {useResponsive3d} from \"../../customHooks/useResponsive3d\";\r\n\r\nexport default function Headset(props) {\r\n  const group = useRef()\r\n  const { nodes, materials, animations } = useGLTF(headset)\r\n  const { actions } = useAnimations(animations, group)\r\n\r\n  //sets finger movement\r\n  const [action, setAction] = useState(\"headsetMove\")\r\n\r\n  useEffect(() => {\r\n    actions[action].reset().fadeIn(0.5).play()\r\n    // setMouseButtonColor(\"#a0e734\")\r\n    return () => actions[action].fadeOut(0.5)\r\n  }, [actions, action]);\r\n\r\n  const {headsetVisible} = useResponsive3d()\r\n\r\n  return (\r\n    <group ref={group} {...props} dispose={null}>\r\n      <group name=\"RootNode_(gltf_orientation_matrix)\"\r\n             // rotation={[-Math.PI / 2, 0, 0]}\r\n      >\r\n        <group\r\n            // position={[-4.38, -3.05, -2.58]}\r\n            visible = {headsetVisible}\r\n        >\r\n          <mesh geometry={nodes.Mesh_0.geometry} material={materials.base} />\r\n          <mesh geometry={nodes.Mesh_1.geometry} material={materials.checker} />\r\n          <mesh geometry={nodes.Mesh_2.geometry} material={materials.checker2} />\r\n          <mesh geometry={nodes.Mesh_3.geometry} material={materials.dots} />\r\n          <mesh geometry={nodes.Mesh_4.geometry} material={materials.foam} />\r\n          <mesh geometry={nodes.Mesh_5.geometry} material={materials.logo} />\r\n          <mesh geometry={nodes.Mesh_6.geometry} material={materials.screen} />\r\n        </group>\r\n      </group>\r\n    </group>\r\n  )\r\n}\r\n\r\nuseGLTF.preload(headset)\r\n","import React from \"react\";\r\nimport {ThreeDScene} from \"./scene/ThreeDScene\";\r\nimport './scene/sceneStyle.css'\r\n\r\n//if xr is NOT on load css to hide xr button\r\nconst xr = navigator.xr;\r\n\r\nif (xr === undefined || null) {\r\n    import ('../ui/scene/customVRButtonSettings.css')\r\n}\r\nexport const Home = () => {\r\n    return (\r\n        <>\r\n            <h1 style={{\"color\":\"white\"}}>HELLO</h1>\r\n            {/* <ThreeDScene /> */}\r\n        </>\r\n    )\r\n}\r\n","import ReactDOM from 'react-dom'\r\nimport {App} from \"./App\";\r\nimport \"bootstrap/dist/css/bootstrap.css\"\r\n\r\n// Use the store so that we can use it to pass information.\r\nReactDOM.render(App(), document.querySelector('#root'));\r\n","import {BrowserRouter} from \"react-router-dom\";\r\nimport {Route, Switch} from 'react-router'\r\nimport {Home} from \"./ui/Home\";\r\nimport {Contact} from \"./ui/Contact\";\r\n\r\n\r\nexport const App = () => (\r\n        <>\r\n                <BrowserRouter>\r\n                    <Switch>\r\n                        <Route exact path='/' component={Home}/>\r\n                        <Route exact path='/contact-form' component={Contact}/>\r\n                    </Switch>\r\n                </BrowserRouter>\r\n        </>\r\n    )\r\n;\r\n"],"sourceRoot":""}